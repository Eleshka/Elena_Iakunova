# -*- coding: utf-8 -*-
"""Youtube_API_Statistics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10mycaf9TpVvu0XVi54D8PIjOKII2wkvh
"""

import pandas as pd
import re # to use regular expressions
from IPython.display import JSON
from googleapiclient.discovery import build
from datetime import timedelta

#Keys
API_KEY = "AIzaSyBi28SR9ZV04PD3yjnfuGKqAf8GA75-yO0"
channel_id = "UCp2J7GRxQ36QLqW4ReLLt5g"

youtube = build('youtube', 'v3', developerKey=API_KEY)

"""## Function to get channel statistics"""

def get_channel_stats(youtube,channel_id):
  request = youtube.channels().list(
      part = 'snippet, contentDetails, statistics',
      id=channel_id)
  response = request.execute()

  data = dict(Channel_name = response['items'][0]['snippet']['title'],
              Subscribers = response ['items'][0]['statistics']['subscriberCount'],
              Views=response['items'][0]['statistics']['viewCount'],
              Total_videos = response['items'][0]['statistics']['videoCount'])
  return data

get_channel_stats(youtube, channel_id)

"""## Several channels

API_KEY = "AIzaSyBi28SR9ZV04PD3yjnfuGKqAf8GA75-yO0"
channel_ids = ["UCp2J7GRxQ36QLqW4ReLLt5g",
                "Ko-ko-ko",
                "Ko-ko-ko",
                "Ko-ko-ko"
                ]
youtube = build('youtube', 'v3', developerKey=API_KEY)

#Function to get channel statistics
def get_channel_stats(youtube,channel_ids):
  all_data = []
  request = youtube.channels().list(
      part = 'snippet, contentDetails, statistics',
      id=','.join(channel_ids))
  response = request.execute()

  for i in range(len(response['items'])):
    data = dict(Channel_name = response['items'][i]['snippet']['title'],
                Subscribers = response ['items'][i]['statistics']['subscriberCount'],
                Views=response['items'][i]['statistics']['viewCount'],
                Total_videos = response['items'][i]['statistics']['videoCount'])
    all_data.append(data)
  return data
"""

"""playlist_ids = ["PLwV1zUscWc90Ib_CMIe9_VkvD--99Mfgu",
                "PLwV1zUscWc93ValWAqVyPSfOS2Yso5eBl",
                "PLwV1zUscWc91rn1NP35Kg6ECK4aYB_0YA",
                "PLwV1zUscWc91CiKtbmcK4qmAcQu5zSlMi",
                "PLwV1zUscWc90Eg18M3ZPDf-HEq8X5nVPn"]"""
playlist_id = "PLwV1zUscWc90Ib_CMIe9_VkvD--99Mfgu"

"""## Get video ids

def get_video_ids(youtube, playlist_id):
  request = youtube.playlistItems().list(
      part = 'contentDetails',
      playlistId = playlist_id,
      maxResults = 50)
  response = request.execute()
  return response
"""

get_video_ids(youtube, playlist_id)

def get_video_ids(youtube, playlist_id):
  request = youtube.playlistItems().list(
      part = 'contentDetails',
      playlistId = playlist_id,
      maxResults = 50
     )
  response = request.execute()
  video_ids = []

  for i in range (len(response['items'])):
    video_ids.append(response['items'][i]['contentDetails']['videoId'])

  next_page_token = response.get('nextPageToken')
  more_pages = True

  while more_pages:
    if next_page_token is None:
      more_pages = False
    else:
      request = youtube.playlistItems().list(
          part = 'contentDetails',
          playlistId = playlist_id,
          maxResults = 50,
          pageToken = next_page_token)
      response = request.execute()
      for i in range (len(response['items'])):
        video_ids.append(response['items'][i]['contentDetails']['videoId'])

      next_page_token = response.get('nextPageToken')
  #return len(video_ids)
  return (video_ids)

#get_video_ids(youtube, playlist_id)

video_ids = get_video_ids (youtube, playlist_id)

video_ids

"""## Function to get video statistics"""

## Function to get video statistics
def get_video_details (youtube, video_ids):
  all_video_stats = [] # blanc list
  for i in range (0, len(video_ids), 50):# 50 videos at a time
    request = youtube.videos().list(
        part = 'snippet, statistics',
        #id = ','.join(video_ids[:50]))# we can pass only 50 at a time
        id = ','.join(video_ids[i:i+50]))# we can pass only 50 at a time
    response = request.execute()

    # get info for each video from 0 to 50
    for video in response['items']:
      video_stats = dict(Title = video['snippet']['title'],
                         Published_date = video['snippet']['publishedAt'],
                         Views = video['statistics']['viewCount'],
                        Likes = video['statistics']['likeCount'],
                        Comments = video['statistics']['commentCount']
                          )
      all_video_stats.append(video_stats)


  return (all_video_stats)

video_details = get_video_details (youtube, video_ids)

video_data = pd.DataFrame(video_details)

video_data

video_data.to_csv('youtube_statistics_shorts.csv')